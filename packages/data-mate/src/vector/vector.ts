import { FieldType, Maybe, Nil } from '@terascope/types';

/**
 * The Vector Type, this will change how the data is stored and read
*/
export enum VectorType {
    /**
     * Currently this operates like String
     * but I imagine will be expanding it.
     * But will need to add format options
    */
    Date = 'Date',
    String = 'String',
    Int = 'Int',
    Float = 'Float',
    BigInt = 'BigInt',
    Boolean = 'Boolean',
    /** @todo */
    Geo = 'Geo',
    /** @todo */
    Object = 'Object',
    /**
     * Arbitrary data can be stored with this
    */
    Any = 'Any',
    /**
     * The list type is used for fields marked as Arrays
     * where each item in the Vector is a child element
    */
    List = 'List',
}

/**
 * Serialize a value to a JSON compatible format (so it can be JSON stringified)
*/
export type ValueToJSONFn<T> = (value: Maybe<T>, thisArg?: Vector<T>) => any;

/**
 * A list of Vector Options
 */
export interface VectorOptions<T> {
    fieldType: FieldType;
    data: Data<T>;
    valueToJSON?: ValueToJSONFn<T>;
}

export type JSONValue<T> = T extends Vector<infer U> ? U[] : T;
export type MaybeJSONValue<T> = Maybe<T>|Maybe<JSONValue<T>>;

/**
 * A data type agnostic in-memory representation of the data
 * for a Vector and potential indices.
 * This should be generated by the builder.
*/
export type Data<T> = Readonly<{
    readonly values: readonly Maybe<T>[];
}>

/**
 * An immutable typed Array class with a constrained API.
 *
 * @note null/undefined values are treated the same
*/
export abstract class Vector<T = unknown> {
    readonly type: VectorType;
    readonly fieldType: FieldType;
    readonly valueToJSON?: ValueToJSONFn<T>;

    protected readonly _size: number;
    readonly data: Data<T>;

    constructor(
        /**
         * This will be set automatically by specific Vector classes
         */
        type: VectorType,
        {
            data, fieldType, valueToJSON
        }: VectorOptions<T>
    ) {
        this.type = type;
        this.fieldType = fieldType;
        this.valueToJSON = valueToJSON;

        this.data = data;
        this._size = this.data.values.length;
    }

    * [Symbol.iterator](): IterableIterator<Maybe<T>> {
        yield* this.data.values;
    }

    /**
     * Returns the number items in the Vector
    */
    get size(): number {
        return this._size;
    }

    /**
     * Gets the number distinct values in the Vector
    */
    distinct(): number {
        return new Set(this).size;
    }

    /**
     * Get value by index
    */
    get(index: number, json?: boolean): Maybe<T>|Maybe<JSONValue<T>> {
        const val = this.data.values[index];
        if (val == null) return val as Nil;
        if (!json || !this.valueToJSON) return val;
        return this.valueToJSON(val);
    }

    /**
     * Create a copy of the Vector
    */
    abstract clone(data?: Data<T>): Vector<T>;

    /**
     * Filter the values in the Vector, returns new Vector
    */
    filter(
        fn: (value: MaybeJSONValue<T>, index: number) => boolean,
        json?: boolean
    ): Vector<T> {
        const values: Maybe<any>[] = [];
        for (let i = 0; i < this.size; i++) {
            const val = this.get(i, json as any);
            if (fn(val, i)) {
                values.push(val);
            }
        }

        // FIXME this doesn't handle coercion
        return this.clone(Object.freeze({
            values: Object.freeze(values)
        }));
    }

    /**
     * Reduce the values in the Vector, returns the result
    */
    reduce<R>(
        fn: (acc: R, value: MaybeJSONValue<T>, index: number) => R,
        initial: R,
        json?: boolean
    ): R {
        let acc = initial;
        for (let i = 0; i < this.size; i++) {
            acc = fn(acc, this.get(i, json), i);
        }
        return acc;
    }

    /**
     * Slice get select values from vector
    */
    slice(start?: number, end?: number): Vector<T> {
        // FIXME this doesn't handle coercion
        return this.clone(Object.freeze({
            values: Object.freeze(
                this.data.values.slice(start, end)
            )
        }));
    }

    /**
     * Convert the Vector an array of values (the output is JSON compatible)
    */
    toJSON(): Maybe<JSONValue<T>>[] {
        const res: Maybe<JSONValue<T>>[] = Array(this.size);
        for (let i = 0; i < this.size; i++) {
            res[i] = this.get(i, true) as JSONValue<T>;
        }
        return res;
    }
}

/**
 * Returns true if the input is a Vector
 */
export function isVector<T>(input: unknown): input is Vector<T> {
    return input instanceof Vector;
}
