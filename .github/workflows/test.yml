name: Teraslice CI Tests
# this will technically run again on merge to master, should limit it
on:
  pull_request:
    branches: [ master ]
env:
  NODE_VERSIONS: '[22, 24]'
  NODE_VERSION_MAIN: '22'
  NODE_VERSIONS_K8S: '[22, 24]'
  NODE_VERSIONS_EXT_STORAGE: '[22]'

jobs:
  compute-node-version-vars:
    runs-on: ubuntu-latest
    outputs:
      NODE_VERSIONS: ${{ steps.step1.outputs.NODE_VERSIONS }}
      NODE_VERSION_MAIN: ${{ steps.step2.outputs.NODE_VERSION_MAIN }}
      NODE_VERSIONS_K8S: ${{ steps.step3.outputs.NODE_VERSIONS_K8S }}
      NODE_VERSIONS_EXT_STORAGE: ${{ steps.step4.outputs.NODE_VERSIONS_EXT_STORAGE }}
    steps:
      - id: step1
        run: echo "NODE_VERSIONS=${{ env.NODE_VERSIONS }}" >> $GITHUB_OUTPUT
      - id: step2
        run: echo "NODE_VERSION_MAIN=${{ env.NODE_VERSION_MAIN }}" >> $GITHUB_OUTPUT
      - id: step3
        run: echo "NODE_VERSIONS_K8S=${{ env.NODE_VERSIONS_K8S }}" >> $GITHUB_OUTPUT
      - id: step4
        run: echo "NODE_VERSIONS_EXT_STORAGE=${{ env.NODE_VERSIONS_EXT_STORAGE }}" >> $GITHUB_OUTPUT

  verify-build:
    runs-on: ubuntu-latest
    needs: compute-node-version-vars
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSION_MAIN) }}
        cache: 'yarn'

    - name: Install and build packages
      run: YARN_ENABLE_HARDENED_MODE=1 yarn && yarn setup

  check-docker-limit-before:
    uses: terascope/workflows/.github/workflows/check-docker-limit.yml@main
    secrets: inherit

  check-github-api-limit-before:
    uses: terascope/workflows/.github/workflows/check-github-api-limit.yml@main
    secrets: inherit

  cache-docker-images:
    needs: check-docker-limit-before
    uses: terascope/workflows/.github/workflows/cache-docker-images.yml@main
    secrets: inherit

  cache-asset-bundles:
    needs: check-github-api-limit-before
    uses: terascope/workflows/.github/workflows/cache-asset-bundles.yml@main
    secrets: inherit

  determine-tests-based-off-commit:
    runs-on: ubuntu-latest
    needs: compute-node-version-vars
    outputs:
      unit: ${{ steps.determine.outputs.unit }}
      e2e: ${{ steps.determine.outputs.e2e }}
      website: ${{ steps.determine.outputs.website }}
      integration: ${{ steps.determine.outputs.integration }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      - name: Setup Node ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSION_MAIN) }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSION_MAIN) }}
          cache: 'yarn'
      - name: Install and build packages
        run: yarn && yarn setup
      - name: Determine tests to run
        id: determine
        # The output of determine-tests would be a json object that looks like this:
          # {
          #   "unit": true,
          #   "e2e": true,
          #   "website": false
          # }
        run: |
          echo "Running determine-tests..."

          JSON=$(yarn determine-tests)
          echo "$JSON"

          UNIT=$(echo "$JSON" | jq -r '.unit')
          E2E=$(echo "$JSON" | jq -r '.e2e')
          WEBSITE=$(echo "$JSON" | jq -r '.website')
          INTEGRATION=$(echo "$JSON" | jq -r '.integration')

          echo "unit=$UNIT" >> $GITHUB_OUTPUT
          echo "e2e=$E2E" >> $GITHUB_OUTPUT
          echo "website=$WEBSITE" >> $GITHUB_OUTPUT
          echo "integration=$INTEGRATION" >> $GITHUB_OUTPUT


  linux-unit-tests:
    if: needs.determine-tests-based-off-commit.outputs.unit == 'true'
    runs-on: ubuntu-latest
    needs: [determine-tests-based-off-commit, compute-node-version-vars]
    strategy:
      matrix:
        node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSIONS) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install and build packages
        run: yarn && yarn setup

      - name: Test
        env:
          REPORT_COVERAGE: true
          # Only run one test per batch for now because jest will only create code
          # coverage for the first package in the batch
          # https://github.com/jestjs/jest/issues/4255
          MAX_PROJECTS_PER_BATCH: 1
        run: yarn test --suite unit --

      - name: Upload Node ${{ matrix.node-version }} unit test coverage
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          codecov_yml_path: ./.github/codecov.yaml
          # files: ./coverage1.xml,./coverage2.xml # optional
          flags: unit
          name: node-${{ matrix.node-version }}-unit-tests
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true # optional (default = false)

  e2e-k8s-v2-tests:
    if: needs.determine-tests-based-off-commit.outputs.e2e == 'true'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: [compute-node-version-vars, verify-build, cache-docker-images, cache-asset-bundles, determine-tests-based-off-commit]
    strategy:
      # opensearch is finiky, keep testing others if it fails
      fail-fast: false
      matrix:
        node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSIONS_K8S) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      # we login to docker to avoid docker pull limit rates
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install and build packages
        run: yarn && yarn setup

      - name: Create Docker Image List
        run: |
          yarn docker:listImages
          cat ./images/image-list.txt

      - name: Restore Docker image cache
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker_cache
          key: docker-images-${{ hashFiles('./images/image-list.txt') }}-master
          restore-keys: |
            docker-images-${{ hashFiles('./images/image-list.txt') }}-
            docker-images-

      - name: Compile e2e code
        run: yarn build
        working-directory: ./e2e

      - name: Get Asset Bundle List From Artifact
        uses: actions/download-artifact@v4
        with:
          name: asset-bundle-txt-file-list
          path: ${{ github.workspace }}/e2e/scripts

      - name: Restore asset bundle cache
        id: asset-bundle-cache
        uses: actions/cache@v4
        with:
          path: /tmp/teraslice_assets
          key: asset-bundles-${{ hashFiles('./e2e/scripts/ci_asset_bundle_list.txt') }}

      - name: Install Kind and Kubectl
        uses: helm/kind-action@v1.10.0
        with:
          install_only: "true"

      - name: Install Helmfile
        run: |
          curl -L "https://github.com/helmfile/helmfile/releases/download/v1.1.2/helmfile_1.1.2_linux_amd64.tar.gz" -o helmfile.tgz
          tar -xzf helmfile.tgz
          chmod +x helmfile
          mv helmfile /usr/local/bin/helmfile
          helm plugin install https://github.com/databus23/helm-diff
          helmfile version
          helm version

      - name: Test CLI Commands
        run: |
          command -v kind
          command -v kubectl
          command -v helm
          command -v helmfile

      - name: Test k8s V2 opensearch2
        run: |
          export OPENSEARCH_PORT=$(../scripts/get-random-port.sh)
          export KAFKA_PORT=$(../scripts/get-random-port.sh)
          export TERASLICE_PORT=$(../scripts/get-random-port.sh)
          NODE_VERSION=${{ matrix.node-version }} yarn test:k8sV2Helmfile
        working-directory: ./e2e

  e2e-k8s-v2-encrypted-tests:
    if: needs.determine-tests-based-off-commit.outputs.e2e == 'true'
    runs-on: ubuntu-latest
    needs: [compute-node-version-vars, verify-build, cache-docker-images, cache-asset-bundles, determine-tests-based-off-commit]
    strategy:
      # opensearch is finiky, keep testing others if it fails
      fail-fast: false
      matrix:
        node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSIONS_EXT_STORAGE) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      # we login to docker to avoid docker pull limit rates
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install and build packages
        run: yarn && yarn setup

      - name: Create Docker Image List
        run: |
          yarn docker:listImages
          cat ./images/image-list.txt

      - name: Restore Docker image cache
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker_cache
          key: docker-images-${{ hashFiles('./images/image-list.txt') }}-master
          restore-keys: |
            docker-images-${{ hashFiles('./images/image-list.txt') }}-
            docker-images-

      - name: Install mkcert
        run: curl -Ss -JLO "https://dl.filippo.io/mkcert/v1.4.4?for=linux/amd64" && sudo chmod 777 mkcert-v1.4.4-linux-amd64 && sudo cp mkcert-v1.4.4-linux-amd64 /usr/local/bin/mkcert

      - name: Install grep
        run: sudo apt update && sudo apt install grep

      - name: Check mkcert
        run: command -v mkcert

      - name: Check grep
        run: command -v grep

      - name: Compile e2e code
        run: yarn build
        working-directory: ./e2e

      - name: Get Asset Bundle List From Artifact
        uses: actions/download-artifact@v4
        with:
          name: asset-bundle-txt-file-list
          path: ${{ github.workspace }}/e2e/scripts

      - name: Restore asset bundle cache
        id: asset-bundle-cache
        uses: actions/cache@v4
        with:
          path: /tmp/teraslice_assets
          key: asset-bundles-${{ hashFiles('./e2e/scripts/ci_asset_bundle_list.txt') }}

      - name: Install Kind and Kubectl
        uses: helm/kind-action@v1.10.0
        with:
          install_only: "true"

      - name: Install Helmfile
        run: |
          curl -L "https://github.com/helmfile/helmfile/releases/download/v1.1.2/helmfile_1.1.2_linux_amd64.tar.gz" -o helmfile.tgz
          tar -xzf helmfile.tgz
          chmod +x helmfile
          mv helmfile /usr/local/bin/helmfile
          helm plugin install https://github.com/databus23/helm-diff
          helmfile version
          helm version

      - name: Test CLI Commands
        run: |
          command -v kind
          command -v kubectl
          command -v helm
          command -v helmfile

      - name: Test k8s V2 opensearch2
        run: |
          export OPENSEARCH_PORT=$(../scripts/get-random-port.sh)
          export KAFKA_PORT=$(../scripts/get-random-port.sh)
          export MINIO_PORT=$(../scripts/get-random-port.sh)
          export TERASLICE_PORT=$(../scripts/get-random-port.sh)
          NODE_VERSION=${{ matrix.node-version }} yarn test:k8sV2HelmfileEncrypted
        working-directory: ./e2e

  e2e-external-storage-tests:
    if: needs.determine-tests-based-off-commit.outputs.e2e == 'true'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    needs: [compute-node-version-vars, verify-build, cache-docker-images, cache-asset-bundles, determine-tests-based-off-commit]
    strategy:
      # opensearch is finiky, keep testing others if it fails
      fail-fast: false
      matrix:
        node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSIONS_EXT_STORAGE) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      # we login to docker to avoid docker pull limit rates
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install and build packages
        run: yarn && yarn setup

      - name: Create Docker Image List
        run: |
          yarn docker:listImages
          cat ./images/image-list.txt

      - name: Restore Docker image cache
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker_cache
          key: docker-images-${{ hashFiles('./images/image-list.txt') }}-master
          restore-keys: |
            docker-images-${{ hashFiles('./images/image-list.txt') }}-
            docker-images-

      - name: Compile e2e code
        run: yarn build
        working-directory: ./e2e

      - name: Get Asset Bundle List From Artifact
        uses: actions/download-artifact@v4
        with:
          name: asset-bundle-txt-file-list
          path: ${{ github.workspace }}/e2e/scripts

      - name: Restore asset bundle cache
        id: asset-bundle-cache
        uses: actions/cache@v4
        with:
          path: /tmp/teraslice_assets
          key: asset-bundles-${{ hashFiles('./e2e/scripts/ci_asset_bundle_list.txt') }}

      - name: Test external Asset Storage opensearch1
        run: |
          export OPENSEARCH_PORT=$(../scripts/get-random-port.sh)
          export KAFKA_PORT=$(../scripts/get-random-port.sh)
          export ZOOKEEPER_PORT=$(../scripts/get-random-port.sh)
          export MINIO_PORT=$(../scripts/get-random-port.sh)
          export TERASLICE_PORT=$(../scripts/get-random-port.sh)
          NODE_VERSION=${{ matrix.node-version }} yarn test:s3AssetStorage
        working-directory: ./e2e

  teraslice-elasticsearch-tests:
    if: needs.determine-tests-based-off-commit.outputs.integration == 'true'
    runs-on: ubuntu-latest
    needs: [compute-node-version-vars, verify-build, cache-docker-images, determine-tests-based-off-commit]
    strategy:
      # opensearch is finiky, keep testing others if it fails
      fail-fast: false
      matrix:
        node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSIONS) }}
        search-version: [elasticsearch7, opensearch1, opensearch2, opensearch3]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      # we login to docker to avoid docker pull limit rates
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install and build packages
        run: yarn && yarn setup

      - name: Create Docker Image List
        run: |
          yarn docker:listImages
          cat ./images/image-list.txt

      - name: Restore Docker image cache
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker_cache
          key: docker-images-${{ hashFiles('./images/image-list.txt') }}-master
          restore-keys: |
            docker-images-${{ hashFiles('./images/image-list.txt') }}-
            docker-images-

      - name: Test ${{ matrix.search-version }}
        env:
          REPORT_COVERAGE: true
        run: |
          export ELASTICSEARCH_PORT=$(../../scripts/get-random-port.sh)
          export OPENSEARCH_PORT=$(../scripts/get-random-port.sh)
          export MINIO_PORT=$(../../scripts/get-random-port.sh)
          yarn test:${{ matrix.search-version }}
        working-directory: ./packages/teraslice

      - name: Upload teraslice node-${{ matrix.node-version }} ${{ matrix.search-version }} test coverage
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          codecov_yml_path: ./.github/codecov.yaml
          flags: teraslice-integration,integration
          name: teraslice-${{ matrix.search-version }}-node-${{ matrix.node-version }}-tests
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true # optional (default = false)

  elasticsearch-store-tests:
    if: needs.determine-tests-based-off-commit.outputs.integration == 'true'
    runs-on: ubuntu-latest
    needs: [compute-node-version-vars, verify-build, cache-docker-images, determine-tests-based-off-commit]
    strategy:
      # opensearch is finiky, keep testing others if it fails
      fail-fast: false
      matrix:
        node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSIONS) }}
        search-version: [elasticsearch7, opensearch1, opensearch2, opensearch3]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      # we login to docker to avoid docker pull limit rates
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install and build packages
        run: yarn && yarn setup

      - name: Create Docker Image List
        run: |
          yarn docker:listImages
          cat ./images/image-list.txt

      - name: Restore Docker image cache
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker_cache
          key: docker-images-${{ hashFiles('./images/image-list.txt') }}-master
          restore-keys: |
            docker-images-${{ hashFiles('./images/image-list.txt') }}-
            docker-images-

      - name: Test ${{ matrix.search-version }}
        env:
          REPORT_COVERAGE: true
        run: |
          export ELASTICSEARCH_PORT=$(../scripts/get-random-port.sh)
          export OPENSEARCH_PORT=$(../scripts/get-random-port.sh)
          yarn test:${{ matrix.search-version }}
        working-directory: ./packages/elasticsearch-store

      - name: Upload elasticsearch-store node-${{ matrix.node-version }} ${{ matrix.search-version }} test coverage
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          codecov_yml_path: ./.github/codecov.yaml
          flags: es-store-integration,integration
          name: es-store-${{ matrix.search-version }}-node-${{ matrix.node-version }}-tests
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true # optional (default = false)

  lint-and-sync:
    runs-on: ubuntu-latest
    needs: [compute-node-version-vars, verify-build, cache-docker-images]
    # will remove the checkout, build and setup when the artifact is made to just
    # test the linting and syncing of the codebase
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSION_MAIN) }}
        cache: 'yarn'

    - name: Install and build packages
      run: yarn && yarn setup

    - name: Lint codebase
      run: yarn lint

    - name: Sync codebase
      run: yarn sync --verify

  elasticsearch-api-tests:
    if: needs.determine-tests-based-off-commit.outputs.integration == 'true'
    runs-on: ubuntu-latest
    needs: [compute-node-version-vars, verify-build, cache-docker-images, determine-tests-based-off-commit]
    strategy:
      # opensearch is finiky, keep testing others if it fails
      fail-fast: false
      matrix:
        node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSIONS) }}
        search-version: [elasticsearch7, opensearch1, opensearch2, opensearch3]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      # we login to docker to avoid docker pull limit rates
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install and build packages
        run: yarn && yarn setup

      - name: Create Docker Image List
        run: |
          yarn docker:listImages
          cat ./images/image-list.txt

      - name: Restore Docker image cache
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker_cache
          key: docker-images-${{ hashFiles('./images/image-list.txt') }}-master
          restore-keys: |
            docker-images-${{ hashFiles('./images/image-list.txt') }}-
            docker-images-

      - name: Test ${{ matrix.search-version }}
        env:
          REPORT_COVERAGE: true
        run: |
          export ELASTICSEARCH_PORT=$(../scripts/get-random-port.sh)
          export OPENSEARCH_PORT=$(../scripts/get-random-port.sh)
          yarn test:${{ matrix.search-version }}
        working-directory: ./packages/elasticsearch-api

      - name: Upload es-api node-${{ matrix.node-version }} ${{ matrix.search-version }} test coverage
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          codecov_yml_path: ./.github/codecov.yaml
          flags: es-api-integration,integration
          name: es-api-${{ matrix.search-version }}-node-${{ matrix.node-version }}-tests
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true # optional (default = false)

  e2e-tests:
    if: needs.determine-tests-based-off-commit.outputs.e2e == 'true'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: [compute-node-version-vars, verify-build, cache-docker-images, cache-asset-bundles, determine-tests-based-off-commit]
    strategy:
      # opensearch is finiky, keep testing others if it fails
      fail-fast: false
      matrix:
        node-version: ${{ fromJSON(needs.compute-node-version-vars.outputs.NODE_VERSIONS) }}
        search-version: [elasticsearch7, opensearch1, opensearch2, opensearch3]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      # we login to docker to avoid docker pull limit rates
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install and build packages
        run: yarn && yarn setup

      - name: Create Docker Image List
        run: |
          yarn docker:listImages
          cat ./images/image-list.txt

      - name: Restore Docker image cache
        id: docker-cache
        uses: actions/cache@v4
        with:
          path: /tmp/docker_cache
          key: docker-images-${{ hashFiles('./images/image-list.txt') }}-master
          restore-keys: |
            docker-images-${{ hashFiles('./images/image-list.txt') }}-
            docker-images-

      - name: Compile e2e code
        run: yarn build
        working-directory: ./e2e

      - name: Get Asset Bundle List From Artifact
        uses: actions/download-artifact@v4
        with:
          name: asset-bundle-txt-file-list
          path: ${{ github.workspace }}/e2e/scripts

      - name: Restore asset bundle cache
        id: asset-bundle-cache
        uses: actions/cache@v4
        with:
          path: /tmp/teraslice_assets
          key: asset-bundles-${{ hashFiles('./e2e/scripts/ci_asset_bundle_list.txt') }}

      - name: Test ${{ matrix.search-version }}
        run: |
          export ELASTICSEARCH_PORT=$(../scripts/get-random-port.sh)
          export OPENSEARCH_PORT=$(../scripts/get-random-port.sh)
          export KAFKA_PORT=$(../scripts/get-random-port.sh)
          export ZOOKEEPER_PORT=$(../scripts/get-random-port.sh)
          export MINIO_PORT=$(../scripts/get-random-port.sh)
          export TERASLICE_PORT=$(../scripts/get-random-port.sh)
          NODE_VERSION=${{ matrix.node-version }} yarn test:${{ matrix.search-version }}
        working-directory: ./e2e

  test-website:
    if: needs.determine-tests-based-off-commit.outputs.website == 'true'
    needs: [verify-build, determine-tests-based-off-commit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          # NOTE: Hard Coded Node Version
          node-version: '22'
      - name: Build documentation
        run: yarn && ./scripts/build-documentation.sh
      - name: Check Output
        run: find ./website/build

  check-docker-limit-after:
    needs: [
      e2e-k8s-v2-encrypted-tests,
      e2e-external-storage-tests,
      e2e-k8s-v2-tests,
      e2e-tests,
      elasticsearch-api-tests,
      elasticsearch-store-tests,
      teraslice-elasticsearch-tests
    ]
    uses: terascope/workflows/.github/workflows/check-docker-limit.yml@main
    secrets: inherit

  check-github-api-limit-after:
    needs: [
      e2e-k8s-v2-encrypted-tests,
      e2e-external-storage-tests,
      e2e-k8s-v2-tests,
      e2e-tests,
      elasticsearch-api-tests,
      elasticsearch-store-tests,
      teraslice-elasticsearch-tests
    ]
    uses: terascope/workflows/.github/workflows/check-github-api-limit.yml@main
    secrets: inherit

  all-tests-passed:
    needs:
      [
        linux-unit-tests,
        e2e-k8s-v2-encrypted-tests,
        e2e-external-storage-tests,
        e2e-k8s-v2-tests,
        e2e-tests,
        elasticsearch-api-tests,
        elasticsearch-store-tests,
        teraslice-elasticsearch-tests,
        lint-and-sync,
        test-website,
        determine-tests-based-off-commit
      ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check job results
        run: |
          failed=""

          declare -A results
          results["linux-unit-tests"]="${{ needs.linux-unit-tests.result }}"
          results["e2e-k8s-v2-encrypted-tests"]="${{ needs.e2e-k8s-v2-encrypted-tests.result }}"
          results["e2e-external-storage-tests"]="${{ needs.e2e-external-storage-tests.result }}"
          results["e2e-k8s-v2-tests"]="${{ needs.e2e-k8s-v2-tests.result }}"
          results["e2e-tests"]="${{ needs.e2e-tests.result }}"
          results["elasticsearch-api-tests"]="${{ needs.elasticsearch-api-tests.result }}"
          results["elasticsearch-store-tests"]="${{ needs.elasticsearch-store-tests.result }}"
          results["teraslice-elasticsearch-tests"]="${{ needs.teraslice-elasticsearch-tests.result }}"
          results["lint-and-sync"]="${{ needs.lint-and-sync.result }}"
          results["test-website"]="${{ needs.test-website.result }}"
          results["determine-tests-based-off-commit"]="${{needs.determine-tests-based-off-commit.result}}"

          for job in "${!results[@]}"; do
            result="${results[$job]}"
            echo "$job: $result"
            if [[ "$result" == "failure" || "$result" == "cancelled" ]]; then
              failed+="$job ($result)\n"
            fi
          done

          if [[ -n "$failed" ]]; then
            echo -e "::error::Some jobs failed or were cancelled:\n$failed"
            exit 1
          fi

          echo "All required jobs passed or were skipped."
          
